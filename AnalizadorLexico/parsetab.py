
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "rightELSEleftEQNEGTLTGELEleft+-left*/rightUMINUSASSIGN ELSE EQ FUNC GE GT ID IF INT LE LT NE NUMBER RETURN WHILEprogram : decl_listdecl_list : decl_list decldecl_list : decldecl : func_declfunc_decl : FUNC ID '(' params_opt ')' blockparams_opt : param_list \n                  | param_list : param_list ',' paramparam_list : paramparam : INT IDblock : '{' stmt_list '}' block : '{' '}' stmt_list : stmt_list stmtstmt_list : stmtstmt : var_decl\n            | assign_stmt\n            | if_stmt\n            | while_stmt\n            | return_stmtvar_decl : INT ID ASSIGN expression ';' var_decl : INT ID ';' assign_stmt : ID ASSIGN expression ';' if_stmt : IF '(' expression ')' blockif_stmt : IF '(' expression ')' block ELSE blockwhile_stmt : WHILE '(' expression ')' blockreturn_stmt : RETURN expression ';' expression : expression '+' expression\n                  | expression '-' expression\n                  | expression '*' expression\n                  | expression '/' expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expressionexpression : '-' expression %prec UMINUSexpression : '(' expression ')' expression : NUMBERexpression : ID"
    
_lr_action_items = {'FUNC':([0,2,3,4,6,16,20,32,],[5,5,-3,-4,-2,-5,-12,-11,]),'$end':([1,2,3,4,6,16,20,32,],[0,-1,-3,-4,-2,-5,-12,-11,]),'ID':([5,12,17,19,20,21,22,23,24,25,26,27,31,32,33,35,36,37,39,40,43,44,48,49,50,51,52,53,54,55,56,57,58,62,76,77,78,80,],[7,15,28,28,-12,-14,-15,-16,-17,-18,-19,34,42,-11,-13,42,42,42,42,42,42,-21,-26,42,42,42,42,42,42,42,42,42,42,-22,-20,-23,-25,-24,]),'(':([7,29,30,31,35,36,37,39,40,43,49,50,51,52,53,54,55,56,57,58,],[8,36,37,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),')':([8,9,10,11,15,18,41,42,46,47,59,60,65,66,67,68,69,70,71,72,73,74,75,],[-7,13,-6,-9,-10,-8,-39,-40,63,64,-37,75,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,]),'INT':([8,14,17,19,20,21,22,23,24,25,26,32,33,44,48,62,76,77,78,80,],[12,12,27,27,-12,-14,-15,-16,-17,-18,-19,-11,-13,-21,-26,-22,-20,-23,-25,-24,]),',':([10,11,15,18,],[14,-9,-10,-8,]),'{':([13,63,64,79,],[17,17,17,17,]),'}':([17,19,20,21,22,23,24,25,26,32,33,44,48,62,76,77,78,80,],[20,32,-12,-14,-15,-16,-17,-18,-19,-11,-13,-21,-26,-22,-20,-23,-25,-24,]),'IF':([17,19,20,21,22,23,24,25,26,32,33,44,48,62,76,77,78,80,],[29,29,-12,-14,-15,-16,-17,-18,-19,-11,-13,-21,-26,-22,-20,-23,-25,-24,]),'WHILE':([17,19,20,21,22,23,24,25,26,32,33,44,48,62,76,77,78,80,],[30,30,-12,-14,-15,-16,-17,-18,-19,-11,-13,-21,-26,-22,-20,-23,-25,-24,]),'RETURN':([17,19,20,21,22,23,24,25,26,32,33,44,48,62,76,77,78,80,],[31,31,-12,-14,-15,-16,-17,-18,-19,-11,-13,-21,-26,-22,-20,-23,-25,-24,]),'ELSE':([20,32,77,],[-12,-11,79,]),'ASSIGN':([28,34,],[35,43,]),'-':([31,35,36,37,38,39,40,41,42,43,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[39,39,39,39,50,39,39,-39,-40,39,50,50,50,39,39,39,39,39,39,39,39,39,39,-37,50,50,-27,-28,-29,-30,50,50,50,50,50,50,-38,]),'NUMBER':([31,35,36,37,39,40,43,49,50,51,52,53,54,55,56,57,58,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),';':([34,38,41,42,45,59,61,65,66,67,68,69,70,71,72,73,74,75,],[44,48,-39,-40,62,-37,76,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,]),'+':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[49,-39,-40,49,49,49,-37,49,49,-27,-28,-29,-30,49,49,49,49,49,49,-38,]),'*':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[51,-39,-40,51,51,51,-37,51,51,51,51,-29,-30,51,51,51,51,51,51,-38,]),'/':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[52,-39,-40,52,52,52,-37,52,52,52,52,-29,-30,52,52,52,52,52,52,-38,]),'GT':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[53,-39,-40,53,53,53,-37,53,53,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,]),'LT':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[54,-39,-40,54,54,54,-37,54,54,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,]),'GE':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[55,-39,-40,55,55,55,-37,55,55,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,]),'LE':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[56,-39,-40,56,56,56,-37,56,56,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,]),'EQ':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[57,-39,-40,57,57,57,-37,57,57,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,]),'NE':([38,41,42,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,75,],[58,-39,-40,58,58,58,-37,58,58,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decl_list':([0,],[2,]),'decl':([0,2,],[3,6,]),'func_decl':([0,2,],[4,4,]),'params_opt':([8,],[9,]),'param_list':([8,],[10,]),'param':([8,14,],[11,18,]),'block':([13,63,64,79,],[16,77,78,80,]),'stmt_list':([17,],[19,]),'stmt':([17,19,],[21,33,]),'var_decl':([17,19,],[22,22,]),'assign_stmt':([17,19,],[23,23,]),'if_stmt':([17,19,],[24,24,]),'while_stmt':([17,19,],[25,25,]),'return_stmt':([17,19,],[26,26,]),'expression':([31,35,36,37,39,40,43,49,50,51,52,53,54,55,56,57,58,],[38,45,46,47,59,60,61,65,66,67,68,69,70,71,72,73,74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decl_list','program',1,'p_program','lexer-parser-implementation.py',74),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list_multiple','lexer-parser-implementation.py',78),
  ('decl_list -> decl','decl_list',1,'p_decl_list_single','lexer-parser-implementation.py',83),
  ('decl -> func_decl','decl',1,'p_decl','lexer-parser-implementation.py',87),
  ('func_decl -> FUNC ID ( params_opt ) block','func_decl',6,'p_func_decl','lexer-parser-implementation.py',91),
  ('params_opt -> param_list','params_opt',1,'p_params_opt','lexer-parser-implementation.py',97),
  ('params_opt -> <empty>','params_opt',0,'p_params_opt','lexer-parser-implementation.py',98),
  ('param_list -> param_list , param','param_list',3,'p_param_list_comma','lexer-parser-implementation.py',106),
  ('param_list -> param','param_list',1,'p_param_list_single','lexer-parser-implementation.py',111),
  ('param -> INT ID','param',2,'p_param','lexer-parser-implementation.py',115),
  ('block -> { stmt_list }','block',3,'p_block','lexer-parser-implementation.py',120),
  ('block -> { }','block',2,'p_block_empty','lexer-parser-implementation.py',124),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list_multiple','lexer-parser-implementation.py',128),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list_single','lexer-parser-implementation.py',133),
  ('stmt -> var_decl','stmt',1,'p_stmt','lexer-parser-implementation.py',137),
  ('stmt -> assign_stmt','stmt',1,'p_stmt','lexer-parser-implementation.py',138),
  ('stmt -> if_stmt','stmt',1,'p_stmt','lexer-parser-implementation.py',139),
  ('stmt -> while_stmt','stmt',1,'p_stmt','lexer-parser-implementation.py',140),
  ('stmt -> return_stmt','stmt',1,'p_stmt','lexer-parser-implementation.py',141),
  ('var_decl -> INT ID ASSIGN expression ;','var_decl',5,'p_var_decl_init','lexer-parser-implementation.py',145),
  ('var_decl -> INT ID ;','var_decl',3,'p_var_decl_noinit','lexer-parser-implementation.py',150),
  ('assign_stmt -> ID ASSIGN expression ;','assign_stmt',4,'p_assign_stmt','lexer-parser-implementation.py',155),
  ('if_stmt -> IF ( expression ) block','if_stmt',5,'p_if_no_else','lexer-parser-implementation.py',160),
  ('if_stmt -> IF ( expression ) block ELSE block','if_stmt',7,'p_if_with_else','lexer-parser-implementation.py',165),
  ('while_stmt -> WHILE ( expression ) block','while_stmt',5,'p_while','lexer-parser-implementation.py',170),
  ('return_stmt -> RETURN expression ;','return_stmt',3,'p_return','lexer-parser-implementation.py',174),
  ('expression -> expression + expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',180),
  ('expression -> expression - expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',181),
  ('expression -> expression * expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',182),
  ('expression -> expression / expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',183),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',184),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',185),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',186),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',187),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',188),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','lexer-parser-implementation.py',189),
  ('expression -> - expression','expression',2,'p_expression_uminus','lexer-parser-implementation.py',195),
  ('expression -> ( expression )','expression',3,'p_expression_group','lexer-parser-implementation.py',200),
  ('expression -> NUMBER','expression',1,'p_expression_number','lexer-parser-implementation.py',205),
  ('expression -> ID','expression',1,'p_expression_var','lexer-parser-implementation.py',210),
]
