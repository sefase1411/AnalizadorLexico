Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> decl_list
Rule 2     decl_list -> decl_list decl
Rule 3     decl_list -> decl
Rule 4     decl -> func_decl
Rule 5     func_decl -> FUNC ID ( params_opt ) block
Rule 6     params_opt -> param_list
Rule 7     params_opt -> <empty>
Rule 8     param_list -> param_list , param
Rule 9     param_list -> param
Rule 10    param -> INT ID
Rule 11    block -> { stmt_list }
Rule 12    block -> { }
Rule 13    stmt_list -> stmt_list stmt
Rule 14    stmt_list -> stmt
Rule 15    stmt -> var_decl
Rule 16    stmt -> assign_stmt
Rule 17    stmt -> if_stmt
Rule 18    stmt -> while_stmt
Rule 19    stmt -> return_stmt
Rule 20    var_decl -> INT ID ASSIGN expression ;
Rule 21    var_decl -> INT ID ;
Rule 22    assign_stmt -> ID ASSIGN expression ;
Rule 23    if_stmt -> IF ( expression ) block
Rule 24    if_stmt -> IF ( expression ) block ELSE block
Rule 25    while_stmt -> WHILE ( expression ) block
Rule 26    return_stmt -> RETURN expression ;
Rule 27    expression -> expression + expression
Rule 28    expression -> expression - expression
Rule 29    expression -> expression * expression
Rule 30    expression -> expression / expression
Rule 31    expression -> expression GT expression
Rule 32    expression -> expression LT expression
Rule 33    expression -> expression GE expression
Rule 34    expression -> expression LE expression
Rule 35    expression -> expression EQ expression
Rule 36    expression -> expression NE expression
Rule 37    expression -> - expression
Rule 38    expression -> ( expression )
Rule 39    expression -> NUMBER
Rule 40    expression -> ID

Terminals, with rules where they appear

(                    : 5 23 24 25 38
)                    : 5 23 24 25 38
*                    : 29
+                    : 27
,                    : 8
-                    : 28 37
/                    : 30
;                    : 20 21 22 26
ASSIGN               : 20 22
ELSE                 : 24
EQ                   : 35
FUNC                 : 5
GE                   : 33
GT                   : 31
ID                   : 5 10 20 21 22 40
IF                   : 23 24
INT                  : 10 20 21
LE                   : 34
LT                   : 32
NE                   : 36
NUMBER               : 39
RETURN               : 26
WHILE                : 25
error                : 
{                    : 11 12
}                    : 11 12

Nonterminals, with rules where they appear

assign_stmt          : 16
block                : 5 23 24 24 25
decl                 : 2 3
decl_list            : 1 2
expression           : 20 22 23 24 25 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 38
func_decl            : 4
if_stmt              : 17
param                : 8 9
param_list           : 6 8
params_opt           : 5
program              : 0
return_stmt          : 19
stmt                 : 13 14
stmt_list            : 11 13
var_decl             : 15
while_stmt           : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . decl_list
    (2) decl_list -> . decl_list decl
    (3) decl_list -> . decl
    (4) decl -> . func_decl
    (5) func_decl -> . FUNC ID ( params_opt ) block

    FUNC            shift and go to state 5

    program                        shift and go to state 1
    decl_list                      shift and go to state 2
    decl                           shift and go to state 3
    func_decl                      shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> decl_list .
    (2) decl_list -> decl_list . decl
    (4) decl -> . func_decl
    (5) func_decl -> . FUNC ID ( params_opt ) block

    $end            reduce using rule 1 (program -> decl_list .)
    FUNC            shift and go to state 5

    decl                           shift and go to state 6
    func_decl                      shift and go to state 4

state 3

    (3) decl_list -> decl .

    FUNC            reduce using rule 3 (decl_list -> decl .)
    $end            reduce using rule 3 (decl_list -> decl .)


state 4

    (4) decl -> func_decl .

    FUNC            reduce using rule 4 (decl -> func_decl .)
    $end            reduce using rule 4 (decl -> func_decl .)


state 5

    (5) func_decl -> FUNC . ID ( params_opt ) block

    ID              shift and go to state 7


state 6

    (2) decl_list -> decl_list decl .

    FUNC            reduce using rule 2 (decl_list -> decl_list decl .)
    $end            reduce using rule 2 (decl_list -> decl_list decl .)


state 7

    (5) func_decl -> FUNC ID . ( params_opt ) block

    (               shift and go to state 8


state 8

    (5) func_decl -> FUNC ID ( . params_opt ) block
    (6) params_opt -> . param_list
    (7) params_opt -> .
    (8) param_list -> . param_list , param
    (9) param_list -> . param
    (10) param -> . INT ID

    )               reduce using rule 7 (params_opt -> .)
    INT             shift and go to state 12

    params_opt                     shift and go to state 9
    param_list                     shift and go to state 10
    param                          shift and go to state 11

state 9

    (5) func_decl -> FUNC ID ( params_opt . ) block

    )               shift and go to state 13


state 10

    (6) params_opt -> param_list .
    (8) param_list -> param_list . , param

    )               reduce using rule 6 (params_opt -> param_list .)
    ,               shift and go to state 14


state 11

    (9) param_list -> param .

    ,               reduce using rule 9 (param_list -> param .)
    )               reduce using rule 9 (param_list -> param .)


state 12

    (10) param -> INT . ID

    ID              shift and go to state 15


state 13

    (5) func_decl -> FUNC ID ( params_opt ) . block
    (11) block -> . { stmt_list }
    (12) block -> . { }

    {               shift and go to state 17

    block                          shift and go to state 16

state 14

    (8) param_list -> param_list , . param
    (10) param -> . INT ID

    INT             shift and go to state 12

    param                          shift and go to state 18

state 15

    (10) param -> INT ID .

    ,               reduce using rule 10 (param -> INT ID .)
    )               reduce using rule 10 (param -> INT ID .)


state 16

    (5) func_decl -> FUNC ID ( params_opt ) block .

    FUNC            reduce using rule 5 (func_decl -> FUNC ID ( params_opt ) block .)
    $end            reduce using rule 5 (func_decl -> FUNC ID ( params_opt ) block .)


state 17

    (11) block -> { . stmt_list }
    (12) block -> { . }
    (13) stmt_list -> . stmt_list stmt
    (14) stmt_list -> . stmt
    (15) stmt -> . var_decl
    (16) stmt -> . assign_stmt
    (17) stmt -> . if_stmt
    (18) stmt -> . while_stmt
    (19) stmt -> . return_stmt
    (20) var_decl -> . INT ID ASSIGN expression ;
    (21) var_decl -> . INT ID ;
    (22) assign_stmt -> . ID ASSIGN expression ;
    (23) if_stmt -> . IF ( expression ) block
    (24) if_stmt -> . IF ( expression ) block ELSE block
    (25) while_stmt -> . WHILE ( expression ) block
    (26) return_stmt -> . RETURN expression ;

    }               shift and go to state 20
    INT             shift and go to state 27
    ID              shift and go to state 28
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    RETURN          shift and go to state 31

    stmt_list                      shift and go to state 19
    stmt                           shift and go to state 21
    var_decl                       shift and go to state 22
    assign_stmt                    shift and go to state 23
    if_stmt                        shift and go to state 24
    while_stmt                     shift and go to state 25
    return_stmt                    shift and go to state 26

state 18

    (8) param_list -> param_list , param .

    ,               reduce using rule 8 (param_list -> param_list , param .)
    )               reduce using rule 8 (param_list -> param_list , param .)


state 19

    (11) block -> { stmt_list . }
    (13) stmt_list -> stmt_list . stmt
    (15) stmt -> . var_decl
    (16) stmt -> . assign_stmt
    (17) stmt -> . if_stmt
    (18) stmt -> . while_stmt
    (19) stmt -> . return_stmt
    (20) var_decl -> . INT ID ASSIGN expression ;
    (21) var_decl -> . INT ID ;
    (22) assign_stmt -> . ID ASSIGN expression ;
    (23) if_stmt -> . IF ( expression ) block
    (24) if_stmt -> . IF ( expression ) block ELSE block
    (25) while_stmt -> . WHILE ( expression ) block
    (26) return_stmt -> . RETURN expression ;

    }               shift and go to state 32
    INT             shift and go to state 27
    ID              shift and go to state 28
    IF              shift and go to state 29
    WHILE           shift and go to state 30
    RETURN          shift and go to state 31

    stmt                           shift and go to state 33
    var_decl                       shift and go to state 22
    assign_stmt                    shift and go to state 23
    if_stmt                        shift and go to state 24
    while_stmt                     shift and go to state 25
    return_stmt                    shift and go to state 26

state 20

    (12) block -> { } .

    FUNC            reduce using rule 12 (block -> { } .)
    $end            reduce using rule 12 (block -> { } .)
    ELSE            reduce using rule 12 (block -> { } .)
    }               reduce using rule 12 (block -> { } .)
    INT             reduce using rule 12 (block -> { } .)
    ID              reduce using rule 12 (block -> { } .)
    IF              reduce using rule 12 (block -> { } .)
    WHILE           reduce using rule 12 (block -> { } .)
    RETURN          reduce using rule 12 (block -> { } .)


state 21

    (14) stmt_list -> stmt .

    }               reduce using rule 14 (stmt_list -> stmt .)
    INT             reduce using rule 14 (stmt_list -> stmt .)
    ID              reduce using rule 14 (stmt_list -> stmt .)
    IF              reduce using rule 14 (stmt_list -> stmt .)
    WHILE           reduce using rule 14 (stmt_list -> stmt .)
    RETURN          reduce using rule 14 (stmt_list -> stmt .)


state 22

    (15) stmt -> var_decl .

    }               reduce using rule 15 (stmt -> var_decl .)
    INT             reduce using rule 15 (stmt -> var_decl .)
    ID              reduce using rule 15 (stmt -> var_decl .)
    IF              reduce using rule 15 (stmt -> var_decl .)
    WHILE           reduce using rule 15 (stmt -> var_decl .)
    RETURN          reduce using rule 15 (stmt -> var_decl .)


state 23

    (16) stmt -> assign_stmt .

    }               reduce using rule 16 (stmt -> assign_stmt .)
    INT             reduce using rule 16 (stmt -> assign_stmt .)
    ID              reduce using rule 16 (stmt -> assign_stmt .)
    IF              reduce using rule 16 (stmt -> assign_stmt .)
    WHILE           reduce using rule 16 (stmt -> assign_stmt .)
    RETURN          reduce using rule 16 (stmt -> assign_stmt .)


state 24

    (17) stmt -> if_stmt .

    }               reduce using rule 17 (stmt -> if_stmt .)
    INT             reduce using rule 17 (stmt -> if_stmt .)
    ID              reduce using rule 17 (stmt -> if_stmt .)
    IF              reduce using rule 17 (stmt -> if_stmt .)
    WHILE           reduce using rule 17 (stmt -> if_stmt .)
    RETURN          reduce using rule 17 (stmt -> if_stmt .)


state 25

    (18) stmt -> while_stmt .

    }               reduce using rule 18 (stmt -> while_stmt .)
    INT             reduce using rule 18 (stmt -> while_stmt .)
    ID              reduce using rule 18 (stmt -> while_stmt .)
    IF              reduce using rule 18 (stmt -> while_stmt .)
    WHILE           reduce using rule 18 (stmt -> while_stmt .)
    RETURN          reduce using rule 18 (stmt -> while_stmt .)


state 26

    (19) stmt -> return_stmt .

    }               reduce using rule 19 (stmt -> return_stmt .)
    INT             reduce using rule 19 (stmt -> return_stmt .)
    ID              reduce using rule 19 (stmt -> return_stmt .)
    IF              reduce using rule 19 (stmt -> return_stmt .)
    WHILE           reduce using rule 19 (stmt -> return_stmt .)
    RETURN          reduce using rule 19 (stmt -> return_stmt .)


state 27

    (20) var_decl -> INT . ID ASSIGN expression ;
    (21) var_decl -> INT . ID ;

    ID              shift and go to state 34


state 28

    (22) assign_stmt -> ID . ASSIGN expression ;

    ASSIGN          shift and go to state 35


state 29

    (23) if_stmt -> IF . ( expression ) block
    (24) if_stmt -> IF . ( expression ) block ELSE block

    (               shift and go to state 36


state 30

    (25) while_stmt -> WHILE . ( expression ) block

    (               shift and go to state 37


state 31

    (26) return_stmt -> RETURN . expression ;
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 38

state 32

    (11) block -> { stmt_list } .

    FUNC            reduce using rule 11 (block -> { stmt_list } .)
    $end            reduce using rule 11 (block -> { stmt_list } .)
    ELSE            reduce using rule 11 (block -> { stmt_list } .)
    }               reduce using rule 11 (block -> { stmt_list } .)
    INT             reduce using rule 11 (block -> { stmt_list } .)
    ID              reduce using rule 11 (block -> { stmt_list } .)
    IF              reduce using rule 11 (block -> { stmt_list } .)
    WHILE           reduce using rule 11 (block -> { stmt_list } .)
    RETURN          reduce using rule 11 (block -> { stmt_list } .)


state 33

    (13) stmt_list -> stmt_list stmt .

    }               reduce using rule 13 (stmt_list -> stmt_list stmt .)
    INT             reduce using rule 13 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 13 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 13 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 13 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 13 (stmt_list -> stmt_list stmt .)


state 34

    (20) var_decl -> INT ID . ASSIGN expression ;
    (21) var_decl -> INT ID . ;

    ASSIGN          shift and go to state 43
    ;               shift and go to state 44


state 35

    (22) assign_stmt -> ID ASSIGN . expression ;
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 45

state 36

    (23) if_stmt -> IF ( . expression ) block
    (24) if_stmt -> IF ( . expression ) block ELSE block
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 46

state 37

    (25) while_stmt -> WHILE ( . expression ) block
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 47

state 38

    (26) return_stmt -> RETURN expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               shift and go to state 48
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GE              shift and go to state 55
    LE              shift and go to state 56
    EQ              shift and go to state 57
    NE              shift and go to state 58


state 39

    (37) expression -> - . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 59

state 40

    (38) expression -> ( . expression )
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 60

state 41

    (39) expression -> NUMBER .

    ;               reduce using rule 39 (expression -> NUMBER .)
    +               reduce using rule 39 (expression -> NUMBER .)
    -               reduce using rule 39 (expression -> NUMBER .)
    *               reduce using rule 39 (expression -> NUMBER .)
    /               reduce using rule 39 (expression -> NUMBER .)
    GT              reduce using rule 39 (expression -> NUMBER .)
    LT              reduce using rule 39 (expression -> NUMBER .)
    GE              reduce using rule 39 (expression -> NUMBER .)
    LE              reduce using rule 39 (expression -> NUMBER .)
    EQ              reduce using rule 39 (expression -> NUMBER .)
    NE              reduce using rule 39 (expression -> NUMBER .)
    )               reduce using rule 39 (expression -> NUMBER .)


state 42

    (40) expression -> ID .

    ;               reduce using rule 40 (expression -> ID .)
    +               reduce using rule 40 (expression -> ID .)
    -               reduce using rule 40 (expression -> ID .)
    *               reduce using rule 40 (expression -> ID .)
    /               reduce using rule 40 (expression -> ID .)
    GT              reduce using rule 40 (expression -> ID .)
    LT              reduce using rule 40 (expression -> ID .)
    GE              reduce using rule 40 (expression -> ID .)
    LE              reduce using rule 40 (expression -> ID .)
    EQ              reduce using rule 40 (expression -> ID .)
    NE              reduce using rule 40 (expression -> ID .)
    )               reduce using rule 40 (expression -> ID .)


state 43

    (20) var_decl -> INT ID ASSIGN . expression ;
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 61

state 44

    (21) var_decl -> INT ID ; .

    }               reduce using rule 21 (var_decl -> INT ID ; .)
    INT             reduce using rule 21 (var_decl -> INT ID ; .)
    ID              reduce using rule 21 (var_decl -> INT ID ; .)
    IF              reduce using rule 21 (var_decl -> INT ID ; .)
    WHILE           reduce using rule 21 (var_decl -> INT ID ; .)
    RETURN          reduce using rule 21 (var_decl -> INT ID ; .)


state 45

    (22) assign_stmt -> ID ASSIGN expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               shift and go to state 62
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GE              shift and go to state 55
    LE              shift and go to state 56
    EQ              shift and go to state 57
    NE              shift and go to state 58


state 46

    (23) if_stmt -> IF ( expression . ) block
    (24) if_stmt -> IF ( expression . ) block ELSE block
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    )               shift and go to state 63
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GE              shift and go to state 55
    LE              shift and go to state 56
    EQ              shift and go to state 57
    NE              shift and go to state 58


state 47

    (25) while_stmt -> WHILE ( expression . ) block
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    )               shift and go to state 64
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GE              shift and go to state 55
    LE              shift and go to state 56
    EQ              shift and go to state 57
    NE              shift and go to state 58


state 48

    (26) return_stmt -> RETURN expression ; .

    }               reduce using rule 26 (return_stmt -> RETURN expression ; .)
    INT             reduce using rule 26 (return_stmt -> RETURN expression ; .)
    ID              reduce using rule 26 (return_stmt -> RETURN expression ; .)
    IF              reduce using rule 26 (return_stmt -> RETURN expression ; .)
    WHILE           reduce using rule 26 (return_stmt -> RETURN expression ; .)
    RETURN          reduce using rule 26 (return_stmt -> RETURN expression ; .)


state 49

    (27) expression -> expression + . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 65

state 50

    (28) expression -> expression - . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 66

state 51

    (29) expression -> expression * . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 67

state 52

    (30) expression -> expression / . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 68

state 53

    (31) expression -> expression GT . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 69

state 54

    (32) expression -> expression LT . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 70

state 55

    (33) expression -> expression GE . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 71

state 56

    (34) expression -> expression LE . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 72

state 57

    (35) expression -> expression EQ . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 73

state 58

    (36) expression -> expression NE . expression
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression GT expression
    (32) expression -> . expression LT expression
    (33) expression -> . expression GE expression
    (34) expression -> . expression LE expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . - expression
    (38) expression -> . ( expression )
    (39) expression -> . NUMBER
    (40) expression -> . ID

    -               shift and go to state 39
    (               shift and go to state 40
    NUMBER          shift and go to state 41
    ID              shift and go to state 42

    expression                     shift and go to state 74

state 59

    (37) expression -> - expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 37 (expression -> - expression .)
    +               reduce using rule 37 (expression -> - expression .)
    -               reduce using rule 37 (expression -> - expression .)
    *               reduce using rule 37 (expression -> - expression .)
    /               reduce using rule 37 (expression -> - expression .)
    GT              reduce using rule 37 (expression -> - expression .)
    LT              reduce using rule 37 (expression -> - expression .)
    GE              reduce using rule 37 (expression -> - expression .)
    LE              reduce using rule 37 (expression -> - expression .)
    EQ              reduce using rule 37 (expression -> - expression .)
    NE              reduce using rule 37 (expression -> - expression .)
    )               reduce using rule 37 (expression -> - expression .)

  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 50 ]
  ! *               [ shift and go to state 51 ]
  ! /               [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 60

    (38) expression -> ( expression . )
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    )               shift and go to state 75
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GE              shift and go to state 55
    LE              shift and go to state 56
    EQ              shift and go to state 57
    NE              shift and go to state 58


state 61

    (20) var_decl -> INT ID ASSIGN expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               shift and go to state 76
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GE              shift and go to state 55
    LE              shift and go to state 56
    EQ              shift and go to state 57
    NE              shift and go to state 58


state 62

    (22) assign_stmt -> ID ASSIGN expression ; .

    }               reduce using rule 22 (assign_stmt -> ID ASSIGN expression ; .)
    INT             reduce using rule 22 (assign_stmt -> ID ASSIGN expression ; .)
    ID              reduce using rule 22 (assign_stmt -> ID ASSIGN expression ; .)
    IF              reduce using rule 22 (assign_stmt -> ID ASSIGN expression ; .)
    WHILE           reduce using rule 22 (assign_stmt -> ID ASSIGN expression ; .)
    RETURN          reduce using rule 22 (assign_stmt -> ID ASSIGN expression ; .)


state 63

    (23) if_stmt -> IF ( expression ) . block
    (24) if_stmt -> IF ( expression ) . block ELSE block
    (11) block -> . { stmt_list }
    (12) block -> . { }

    {               shift and go to state 17

    block                          shift and go to state 77

state 64

    (25) while_stmt -> WHILE ( expression ) . block
    (11) block -> . { stmt_list }
    (12) block -> . { }

    {               shift and go to state 17

    block                          shift and go to state 78

state 65

    (27) expression -> expression + expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 27 (expression -> expression + expression .)
    +               reduce using rule 27 (expression -> expression + expression .)
    -               reduce using rule 27 (expression -> expression + expression .)
    GT              reduce using rule 27 (expression -> expression + expression .)
    LT              reduce using rule 27 (expression -> expression + expression .)
    GE              reduce using rule 27 (expression -> expression + expression .)
    LE              reduce using rule 27 (expression -> expression + expression .)
    EQ              reduce using rule 27 (expression -> expression + expression .)
    NE              reduce using rule 27 (expression -> expression + expression .)
    )               reduce using rule 27 (expression -> expression + expression .)
    *               shift and go to state 51
    /               shift and go to state 52

  ! *               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 50 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 66

    (28) expression -> expression - expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 28 (expression -> expression - expression .)
    +               reduce using rule 28 (expression -> expression - expression .)
    -               reduce using rule 28 (expression -> expression - expression .)
    GT              reduce using rule 28 (expression -> expression - expression .)
    LT              reduce using rule 28 (expression -> expression - expression .)
    GE              reduce using rule 28 (expression -> expression - expression .)
    LE              reduce using rule 28 (expression -> expression - expression .)
    EQ              reduce using rule 28 (expression -> expression - expression .)
    NE              reduce using rule 28 (expression -> expression - expression .)
    )               reduce using rule 28 (expression -> expression - expression .)
    *               shift and go to state 51
    /               shift and go to state 52

  ! *               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 50 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 67

    (29) expression -> expression * expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 29 (expression -> expression * expression .)
    +               reduce using rule 29 (expression -> expression * expression .)
    -               reduce using rule 29 (expression -> expression * expression .)
    *               reduce using rule 29 (expression -> expression * expression .)
    /               reduce using rule 29 (expression -> expression * expression .)
    GT              reduce using rule 29 (expression -> expression * expression .)
    LT              reduce using rule 29 (expression -> expression * expression .)
    GE              reduce using rule 29 (expression -> expression * expression .)
    LE              reduce using rule 29 (expression -> expression * expression .)
    EQ              reduce using rule 29 (expression -> expression * expression .)
    NE              reduce using rule 29 (expression -> expression * expression .)
    )               reduce using rule 29 (expression -> expression * expression .)

  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 50 ]
  ! *               [ shift and go to state 51 ]
  ! /               [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 68

    (30) expression -> expression / expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 30 (expression -> expression / expression .)
    +               reduce using rule 30 (expression -> expression / expression .)
    -               reduce using rule 30 (expression -> expression / expression .)
    *               reduce using rule 30 (expression -> expression / expression .)
    /               reduce using rule 30 (expression -> expression / expression .)
    GT              reduce using rule 30 (expression -> expression / expression .)
    LT              reduce using rule 30 (expression -> expression / expression .)
    GE              reduce using rule 30 (expression -> expression / expression .)
    LE              reduce using rule 30 (expression -> expression / expression .)
    EQ              reduce using rule 30 (expression -> expression / expression .)
    NE              reduce using rule 30 (expression -> expression / expression .)
    )               reduce using rule 30 (expression -> expression / expression .)

  ! +               [ shift and go to state 49 ]
  ! -               [ shift and go to state 50 ]
  ! *               [ shift and go to state 51 ]
  ! /               [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 69

    (31) expression -> expression GT expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 31 (expression -> expression GT expression .)
    GT              reduce using rule 31 (expression -> expression GT expression .)
    LT              reduce using rule 31 (expression -> expression GT expression .)
    GE              reduce using rule 31 (expression -> expression GT expression .)
    LE              reduce using rule 31 (expression -> expression GT expression .)
    EQ              reduce using rule 31 (expression -> expression GT expression .)
    NE              reduce using rule 31 (expression -> expression GT expression .)
    )               reduce using rule 31 (expression -> expression GT expression .)
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52

  ! +               [ reduce using rule 31 (expression -> expression GT expression .) ]
  ! -               [ reduce using rule 31 (expression -> expression GT expression .) ]
  ! *               [ reduce using rule 31 (expression -> expression GT expression .) ]
  ! /               [ reduce using rule 31 (expression -> expression GT expression .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 70

    (32) expression -> expression LT expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 32 (expression -> expression LT expression .)
    GT              reduce using rule 32 (expression -> expression LT expression .)
    LT              reduce using rule 32 (expression -> expression LT expression .)
    GE              reduce using rule 32 (expression -> expression LT expression .)
    LE              reduce using rule 32 (expression -> expression LT expression .)
    EQ              reduce using rule 32 (expression -> expression LT expression .)
    NE              reduce using rule 32 (expression -> expression LT expression .)
    )               reduce using rule 32 (expression -> expression LT expression .)
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52

  ! +               [ reduce using rule 32 (expression -> expression LT expression .) ]
  ! -               [ reduce using rule 32 (expression -> expression LT expression .) ]
  ! *               [ reduce using rule 32 (expression -> expression LT expression .) ]
  ! /               [ reduce using rule 32 (expression -> expression LT expression .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 71

    (33) expression -> expression GE expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 33 (expression -> expression GE expression .)
    GT              reduce using rule 33 (expression -> expression GE expression .)
    LT              reduce using rule 33 (expression -> expression GE expression .)
    GE              reduce using rule 33 (expression -> expression GE expression .)
    LE              reduce using rule 33 (expression -> expression GE expression .)
    EQ              reduce using rule 33 (expression -> expression GE expression .)
    NE              reduce using rule 33 (expression -> expression GE expression .)
    )               reduce using rule 33 (expression -> expression GE expression .)
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52

  ! +               [ reduce using rule 33 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 33 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 33 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 33 (expression -> expression GE expression .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 72

    (34) expression -> expression LE expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 34 (expression -> expression LE expression .)
    GT              reduce using rule 34 (expression -> expression LE expression .)
    LT              reduce using rule 34 (expression -> expression LE expression .)
    GE              reduce using rule 34 (expression -> expression LE expression .)
    LE              reduce using rule 34 (expression -> expression LE expression .)
    EQ              reduce using rule 34 (expression -> expression LE expression .)
    NE              reduce using rule 34 (expression -> expression LE expression .)
    )               reduce using rule 34 (expression -> expression LE expression .)
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52

  ! +               [ reduce using rule 34 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 34 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 34 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 34 (expression -> expression LE expression .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 73

    (35) expression -> expression EQ expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 35 (expression -> expression EQ expression .)
    GT              reduce using rule 35 (expression -> expression EQ expression .)
    LT              reduce using rule 35 (expression -> expression EQ expression .)
    GE              reduce using rule 35 (expression -> expression EQ expression .)
    LE              reduce using rule 35 (expression -> expression EQ expression .)
    EQ              reduce using rule 35 (expression -> expression EQ expression .)
    NE              reduce using rule 35 (expression -> expression EQ expression .)
    )               reduce using rule 35 (expression -> expression EQ expression .)
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52

  ! +               [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 74

    (36) expression -> expression NE expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . GT expression
    (32) expression -> expression . LT expression
    (33) expression -> expression . GE expression
    (34) expression -> expression . LE expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression

    ;               reduce using rule 36 (expression -> expression NE expression .)
    GT              reduce using rule 36 (expression -> expression NE expression .)
    LT              reduce using rule 36 (expression -> expression NE expression .)
    GE              reduce using rule 36 (expression -> expression NE expression .)
    LE              reduce using rule 36 (expression -> expression NE expression .)
    EQ              reduce using rule 36 (expression -> expression NE expression .)
    NE              reduce using rule 36 (expression -> expression NE expression .)
    )               reduce using rule 36 (expression -> expression NE expression .)
    +               shift and go to state 49
    -               shift and go to state 50
    *               shift and go to state 51
    /               shift and go to state 52

  ! +               [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! -               [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! *               [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! /               [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GE              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 75

    (38) expression -> ( expression ) .

    ;               reduce using rule 38 (expression -> ( expression ) .)
    +               reduce using rule 38 (expression -> ( expression ) .)
    -               reduce using rule 38 (expression -> ( expression ) .)
    *               reduce using rule 38 (expression -> ( expression ) .)
    /               reduce using rule 38 (expression -> ( expression ) .)
    GT              reduce using rule 38 (expression -> ( expression ) .)
    LT              reduce using rule 38 (expression -> ( expression ) .)
    GE              reduce using rule 38 (expression -> ( expression ) .)
    LE              reduce using rule 38 (expression -> ( expression ) .)
    EQ              reduce using rule 38 (expression -> ( expression ) .)
    NE              reduce using rule 38 (expression -> ( expression ) .)
    )               reduce using rule 38 (expression -> ( expression ) .)


state 76

    (20) var_decl -> INT ID ASSIGN expression ; .

    }               reduce using rule 20 (var_decl -> INT ID ASSIGN expression ; .)
    INT             reduce using rule 20 (var_decl -> INT ID ASSIGN expression ; .)
    ID              reduce using rule 20 (var_decl -> INT ID ASSIGN expression ; .)
    IF              reduce using rule 20 (var_decl -> INT ID ASSIGN expression ; .)
    WHILE           reduce using rule 20 (var_decl -> INT ID ASSIGN expression ; .)
    RETURN          reduce using rule 20 (var_decl -> INT ID ASSIGN expression ; .)


state 77

    (23) if_stmt -> IF ( expression ) block .
    (24) if_stmt -> IF ( expression ) block . ELSE block

    }               reduce using rule 23 (if_stmt -> IF ( expression ) block .)
    INT             reduce using rule 23 (if_stmt -> IF ( expression ) block .)
    ID              reduce using rule 23 (if_stmt -> IF ( expression ) block .)
    IF              reduce using rule 23 (if_stmt -> IF ( expression ) block .)
    WHILE           reduce using rule 23 (if_stmt -> IF ( expression ) block .)
    RETURN          reduce using rule 23 (if_stmt -> IF ( expression ) block .)
    ELSE            shift and go to state 79


state 78

    (25) while_stmt -> WHILE ( expression ) block .

    }               reduce using rule 25 (while_stmt -> WHILE ( expression ) block .)
    INT             reduce using rule 25 (while_stmt -> WHILE ( expression ) block .)
    ID              reduce using rule 25 (while_stmt -> WHILE ( expression ) block .)
    IF              reduce using rule 25 (while_stmt -> WHILE ( expression ) block .)
    WHILE           reduce using rule 25 (while_stmt -> WHILE ( expression ) block .)
    RETURN          reduce using rule 25 (while_stmt -> WHILE ( expression ) block .)


state 79

    (24) if_stmt -> IF ( expression ) block ELSE . block
    (11) block -> . { stmt_list }
    (12) block -> . { }

    {               shift and go to state 17

    block                          shift and go to state 80

state 80

    (24) if_stmt -> IF ( expression ) block ELSE block .

    }               reduce using rule 24 (if_stmt -> IF ( expression ) block ELSE block .)
    INT             reduce using rule 24 (if_stmt -> IF ( expression ) block ELSE block .)
    ID              reduce using rule 24 (if_stmt -> IF ( expression ) block ELSE block .)
    IF              reduce using rule 24 (if_stmt -> IF ( expression ) block ELSE block .)
    WHILE           reduce using rule 24 (if_stmt -> IF ( expression ) block ELSE block .)
    RETURN          reduce using rule 24 (if_stmt -> IF ( expression ) block ELSE block .)

